// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package check_solution

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GradingServiceClient is the client API for GradingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GradingServiceClient interface {
	Grading(ctx context.Context, in *GradingRequest, opts ...grpc.CallOption) (*GradingResponse, error)
}

type gradingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGradingServiceClient(cc grpc.ClientConnInterface) GradingServiceClient {
	return &gradingServiceClient{cc}
}

func (c *gradingServiceClient) Grading(ctx context.Context, in *GradingRequest, opts ...grpc.CallOption) (*GradingResponse, error) {
	out := new(GradingResponse)
	err := c.cc.Invoke(ctx, "/check_solution.gradingService/Grading", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GradingServiceServer is the server API for GradingService service.
// All implementations must embed UnimplementedGradingServiceServer
// for forward compatibility
type GradingServiceServer interface {
	Grading(context.Context, *GradingRequest) (*GradingResponse, error)
	mustEmbedUnimplementedGradingServiceServer()
}

// UnimplementedGradingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGradingServiceServer struct {
}

func (UnimplementedGradingServiceServer) Grading(context.Context, *GradingRequest) (*GradingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grading not implemented")
}
func (UnimplementedGradingServiceServer) mustEmbedUnimplementedGradingServiceServer() {}

// UnsafeGradingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GradingServiceServer will
// result in compilation errors.
type UnsafeGradingServiceServer interface {
	mustEmbedUnimplementedGradingServiceServer()
}

func RegisterGradingServiceServer(s grpc.ServiceRegistrar, srv GradingServiceServer) {
	s.RegisterService(&GradingService_ServiceDesc, srv)
}

func _GradingService_Grading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradingServiceServer).Grading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/check_solution.gradingService/Grading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradingServiceServer).Grading(ctx, req.(*GradingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GradingService_ServiceDesc is the grpc.ServiceDesc for GradingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GradingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "check_solution.gradingService",
	HandlerType: (*GradingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Grading",
			Handler:    _GradingService_Grading_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "check_solution.proto",
}
